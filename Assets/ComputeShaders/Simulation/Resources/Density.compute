#pragma kernel ComputeDensity

#include "../Common.hlsl"

StructuredBuffer<uint2> _GridParticleIDBufferRead;

StructuredBuffer<Particle> _ParticleBufferRead;

RWStructuredBuffer<float> _ParticleDensityBufferWrite;

float _H;

[numthreads(128, 1, 1)]
void ComputeDensity(uint3 thread_id : SV_DispatchThreadID)
{
    RETURN_IF_INVALID(thread_id);

    const uint p_id = thread_id.x;

    const Particle p = _ParticleBufferRead[p_id];
    const float3 p_position = p.position;

    float p_density = 0;

    FOR_EACH_NEIGHBOR_CELL_PARTICLE_START(WorldPosToCellIndex(p_position, _GridMin, _GridInvSpacing), n_id, _GridParticleIDBufferRead, grid_range, _GridSize)
    {
        const Particle np = _ParticleBufferRead[n_id];

        p_density += np.mass * W(p_position - np.position, _H);
    }
    FOR_EACH_NEIGHBOR_CELL_PARTICLE_END

    _ParticleDensityBufferWrite[p_id] = p_density;
}